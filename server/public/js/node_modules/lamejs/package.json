{
  "name": "lamejs",
  "version": "1.0.0",
  "description": "Pure JavaScript MP3 Encoder",
  "main": "src/js/lametest.js",
  "directories": {
    "doc": "doc",
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zhuker/lamejs.git"
  },
  "keywords": [
    "mp3",
    "encoder",
    "audio",
    "webaudio"
  ],
  "author": {
    "name": "Alex Zhukov"
  },
  "license": "LGPL-3.0",
  "bugs": {
    "url": "https://github.com/zhuker/lamejs/issues"
  },
  "homepage": "https://github.com/zhuker/lamejs#readme",
  "readme": "# lamejs\nFast mp3 encoder written in JavaScript.\nOn my machine it works 20x faster than realtime (it will encode 132 second long sample in 6.5 seconds) both on node and chrome.\nlamejs is a rewrite of jump3r-code which is a rewrite of libmp3lame.\n\n# Quick Start\n\n```javascript\n<script src='lame.all.js'></script>\nlib = new lamejs();\nmp3encoder = new lib.Mp3Encoder(1, 44100, 128); //mono 44.1khz encode to 128kbps\nsamples = new Int16Array(44100); //one second of silence\nvar mp3 = mp3encoder.encodeBuffer(samples); //encode mp3\n//write mp3 here\nmp3 = mp3encoder.flush();\n//write mp3 here\n```\n\n# Real Example\n\nEither see [example.html](https://github.com/zhuker/lamejs/blob/master/example.html) for full example of wav file encoding in browser or use this:\n\n```javascript\n<script src='lame.all.js'></script>\n<script>\nlib = new lamejs();\nchannels = 1; //1 for mono or 2 for stereo\nsampleRate = 44100; //44.1khz (normal mp3 samplerate)\nkbps = 128; //encode 128kbps mp3\nmp3encoder = new lib.Mp3Encoder(channels, sampleRate, kbps);\n\nsamples = new Int16Array(44100); //one second of silence (get your data from the source you have)\nsampleBlockSize = 1152; //can be anything but make it a multiple of 576 to make encoders life easier\n\nfor (var i = 0; i < samples.length; i += sampleBlockSize) {\n  sampleChunk = samples.subarray(i, i + sampleBlockSize);\n  var mp3buf = mp3encoder.encodeBuffer(sampleChunk);\n  if (mp3buf.length > 0) {\n    //TODO: write your mp3 here\n  }\n}\nvar mp3buf = mp3encoder.flush();   //finish writing mp3\n\nif (mp3buf.length > 0) {\n    //TODO: finish writing your mp3 here\n}\n</script>\n```\n\n# Stereo\n\nIf you want to encode stereo mp3 use separate sample buffers for left and right channel\n\n```javascript\n<script src='lame.all.js'></script>\n<script>\nlib = new lamejs();\nmp3encoder = new lib.Mp3Encoder(2, 44100, 128);\n\nleft = new Int16Array(44100); //one second of silence (get your data from the source you have)\nright = new Int16Array(44100); //one second of silence (get your data from the source you have)\nsampleBlockSize = 1152; //can be anything but make it a multiple of 576 to make encoders life easier\n\nfor (var i = 0; i < samples.length; i += sampleBlockSize) {\n  leftChunk = left.subarray(i, i + sampleBlockSize);\n  rightChunk = right.subarray(i, i + sampleBlockSize);\n  var mp3buf = mp3encoder.encodeBuffer(leftChunk, rightChunk);\n  if (mp3buf.length > 0) {\n    //TODO: write your mp3 here\n  }\n}\nvar mp3buf = mp3encoder.flush();   //finish writing mp3\n\nif (mp3buf.length > 0) {\n    //TODO: finish writing your mp3 here\n}\n</script>\n```\n\n",
  "readmeFilename": "README.md",
  "_id": "lamejs@1.0.0",
  "dist": {
    "shasum": "41df3fe21e2916d81949c9d9e0c53fd5f131724e"
  },
  "_from": "lamejs@",
  "_resolved": "https://registry.npmjs.org/lamejs/-/lamejs-1.0.0.tgz"
}
